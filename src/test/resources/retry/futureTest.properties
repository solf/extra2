#/** Used in thread names and other places to distinguish from other stuff, e.g. something like WBRBCache[cacheName]-read-thread-pool-1 */
serviceName=futureTest
	
	
#/** Maximum allowed number of attempts for one requests -- if request doesn't complete successfully in this many attempts, it is abandoned (considired 'failed final') */ 
maxAttempts=1
	
#/** A list of delays applied after each subsequent failure in order; must contain at least one element; if list is shorter than the already-failed attempts count, then the last value in the list is used */
delaysAfterFailure=10s
	
#/** The maximum number of pending/in-flight requests that the service is allowed to handle; trying to add more will result in {@link RejectedExecutionException} */
maxPendingRequests=100
	
	
#/** Grace period that allows requests to be processed this much earlier than intended; since delay mechanisms used by the service are not exact, it's useful for performance reasons to set it to e.g. the same value as shortest delay queue */
requestEarlyProcessingGracePeriod=0ms
	

#/** 
# * To implement delays internally the service uses a collection of delay queues 
# * each of which delays an item for the set amount of time.
# * <p>
# * It is possible to use just one queue with short delay time, however it
# * will introduce CPU costs as the queue will constantly rotate its elements;
# * therefore it is advisable to use a set of queues that cover the expected
# * delays with not-too-many total trips through all the queues.
# * <p>
# * E.g. if you would like to have delay precision of 100ms and maximum delay
# * is on the order of 5 minutes, you might want to do something like:
# * 100ms, 500ms, 2s, 10s, 1m
# */
delayQueues=100ms,1s,10s

	
#/** Rate limiter's bucket size [starts empty] (maximum number of available tokens that can be stored); setting this to zero disables rate limiter -- requests are sent for execution asap */
rateLimiterBucketSize=1
	
#/** Rate limiter's refill rate per time interval (which defaults to 1 second) */
rateLimiterRefillRate=1000
	
#/** Default: 1s; rate limiter's refill time interval (refill rate is spread over this time interval) */
#rateLimiterRefillInterval=1s

	
#/** Thread pool size for requests processing, must contain two elements: min size, max size */
requestProcessingThreadPoolConfig=1,10



####################################################
# Below is stuff that has sensible default values. #
####################################################

# /** Default: 500ms; THIS IS IN 'REAL MS' (not affected by time factors) -- no thread is allowed to sleep/wait for blocking operation longer than this time at a time; this helps with e.g. handling shutdown and/or changing time factor and possibly other issues; you might want to increase this if your read/write methods routinely wait for longer */
maxSleepTime=20ms


# /** Default: 5; percent time allocated during shutdown to cover 'processing delays' -- i.e. target shutdown time will be actually less than requested time by this amount (in percents) */
#shutdownBufferTimePerc=5


# /** Default: 1s; Grace period that allows a 'too long' delay queue to still be used (this accounts for processing delays when delay queue duration is equal to intended delay after an attempt) */
#delayQueueTooLongGracePeriod=1s

	
#/** Default: 5 (Thread.NORM_PRIORITY); priority to be used for requests processing thread pool */ 
#requestProcessingThreadPriority=5
	
	
#/** Default: 6 (Thread.NORM_PRIORITY + 1); priority to be used for main queue processing thread */ 
#mainQueueProcessingThreadPriority=6
	
#/** Default: 10; limit on unexpected {@link InterruptedException} in main queue processing before giving up; giving up renders service inoperable */
#mainQueueUnexpectedInterruptedExceptionLimit=10
	
#/** Default: 10; limit on unhandled {@link RuntimeException} in  main queue processing before giving up; giving up renders service inoperable */
#mainQueueRuntimeExceptionLimit=10
	
#/** Default: 2000ms; how long at a maximum main queue processing will wait for worker thread to pick up request for processing; in practice this should be near-instant; but if this value is exceeded, then error is logged and item processing is aborted (it is re-queued) */ 
#mainQueueMaxRequestHandoverWaitTime=2000ms
	
#/** Default: 6 (Thread.NORM_PRIORITY + 1); priority to be used for threads processing delay queues */ 
#delayQueueProcessingThreadPriority=6
	
#/** Default: 10; limit on unexpected {@link InterruptedException} in delay queue processing before giving up; giving up renders service inoperable */
#delayQueueUnexpectedInterruptedExceptionLimit=10
	
#/** Default: 10; limit on unhandled {@link RuntimeException} in delay queue processing before giving up; giving up renders service inoperable */
#delayQueueRuntimeExceptionLimit=10
