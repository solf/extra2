#/** Used in thread names and other places to distinguish from other stuff, e.g. something like WBRBCache[cacheName]-read-thread-pool-1 */
# Typically overriden
#cacheName=someName

#/** Cache maintains an internal 'main' data queue for the data that was cached and may need to be written to the storage; this indicates maximum target size for this queue (i.e. should not exceed the size under normal circumstances); note that this is not the whole size of the cache, there's also 'return' queue TODO more details? */
mainQueueMaxTargetSize=1000

#/** How many updates (per cache item) we are allowed to collect */
maxUpdatesToCollect=100

#/** Target time for cache elements to spend in the main processing queue; they can be processed faster if cache is exceeding size limits */
mainQueueCacheTime=4s

#/** Minimum time that cache elements spend in the return queue -- this is intended to give time for the write operation to complete before cache eviction is considered */  
returnQueueCacheTimeMin=1s

#/** Whether cache can merge writes -- specifically if some background write has failed AND there are new updates to the cache value, can cache produce a single write data that merges these values in {@link WriteBehindResyncInBackgroundCache#splitForWrite(Object, Object, site.sonata.extra2.nullable.NullableOptional)}; if not, then previously failed write can only be re-attempted by itself (thus delaying when further in-memory updates will be written out) */
canMergeWrites=true


#/** When inital read fails (final fail after possible retries) what action should be taken; options are in WBRBInitialReadFailedFinalDecision: REMOVE_FROM_CACHE, KEEP_AND_THROW_CACHE_READ_EXCEPTIONS */ 
initialReadFailedFinalAction=REMOVE_FROM_CACHE

#/** When background resync is too late (not all updates are collected) what action should be taken; options are in WBRBMergeDecision: SET_DIRECTLY (use data from storage, ignore in-memory data), MERGE_DATA (even though updates were not properly tracked, CLEAR_READ_PENDING_STATUS (keep current in-memory data), REMOVE_FROM_CACHE, DO_NOTHING (!!! this is dangerous, should not be used in most cases, see CLEAR_READ_PENDING_STATUS instead) */ 
resyncTooLateAction=CLEAR_READ_PENDING_STATUS

#/** When background resync fails (final fail after possible retries) what action should be taken; options are in WBRBResyncFailedFinalDecision: REMOVE_FROM_CACHE, STOP_COLLECTING_UPDATES, KEEP_COLLECTING_UPDATES */ 
resyncFailedFinalAction=KEEP_COLLECTING_UPDATES

#/** Whether cache is allowed to write out data that needed a resync when that resync failed and there is no option to attempt resync again; either value may result in data loss */
allowDataWritingAfterResyncFailedFinal=true

#/** Whether cache is allowed to read (provide to clients) data that needed a resync when that resync failed and there is no option to attempt resync again; either value may result in data loss */
allowDataReadingAfterResyncFailedFinal=true



#/** Min value and max value for read thread pool size (reads are normally executed in separate threads); -1, -1 indicates that there's no read thread pool and instead reads are performed in the read queue processing thread -- in this case you should typically provide your own async processing to e.g. support batching */
readThreadPoolSize=0,25

#/** Min value and max value for write thread pool size (writes are normally executed in separate threads); -1, -1 indicates that there's no write thread pool and instead writes are performed in the write queue processing thread -- in this case you should typically provide your own async processing to e.g. support batching */
writeThreadPoolSize=0,25



#/** Specifies how many times read failures are retried; this only affects standard implementation of retry checking */
readFailureMaxRetryCount=3

#/** Specifies how many times write failures are retried; this only affects standard implementation of retry checking */
writeFailureMaxRetryCount=3

#/** Specifies how many times full cache cycle failures are retried (e.g. when item resync or write fails); this only affects standard implementation of retry checking */
fullCacheCycleFailureMaxRetryCount=3

#/** How many times item can be re-queued in return queue before giving up (affects default implementation of 'write pending' state) */
returnQueueMaxRequeueCount=3





# Options with default below

#/** Default value: 2x {@link #dataQueueMaxTargetSize}; if cache size (including data queue and other internal queue(s) such as 'return' queue) exceeds this value then no further elements can be added and attempts to do so fail with {@link CacheFullException}  */
#maxCacheElementsHardLimit=

#/** Default: 1/10 of mainQueueCacheTime; minimum time for cache elements to stay in the main processing queue; if there's not enough cache size to accommodate this value, new elements will be rejected; used to avoid busy loops and similar problems */  
#mainQueueCacheTimeMin=

#/** Default: true; whether it is allowed to keep collecting updates when read/resync has been failing for more than 1 full cycle (allowing it has obvious memory costs) */
#allowUpdatesCollectionForMultipleFullCycles=

#/** Default: Thread.NORM_PRIORITY + 1; priority to be used for read queue processing thread */ 
#readQueueProcessingThreadPriority=

#/** Default: 100ms; zero value disables batching functionality; how long read queue processor will wait for the next read item before declaring the batch finished; only useful if batching is used; TODO add info */
#readQueueBatchingDelay= 

#/** Default: Thread.NORM_PRIORITY; priority for threads in read pool */
#readThreadPoolPriority=

#/** Default: 60s; max idle time for threads in read pool (if idle exceeds minimum thread count) */
#readThreadPoolMaxIdleTime=

#/** Default: Thread.NORM_PRIORITY + 1; priority to be used for write queue processing thread */ 
#writeQueueProcessingThreadPriority=

#/** Default: 100ms; zero value disables batching functionality; how long write queue processor will wait for the next write item before declaring the batch finished; only useful if batching is used; TODO add info */
#writeQueueBatchingDelay= 

#/** Default: Thread.NORM_PRIORITY; priority for threads in write pool */
#writeThreadPoolPriority=

#/** Default: 60s; max idle time for threads in write pool (if idle exceeds minimum thread count) */
#writeThreadPoolMaxIdleTime=

#/** Default: Thread.NORM_PRIORITY + 1; priority to be used for main queue processing thread */ 
#mainQueueProcessingThreadPriority=

#/** Default: Thread.NORM_PRIORITY + 1; priority to be used for return queue processing thread */ 
#returnQueueProcessingThreadPriority=

#/** Default: 3; how many times cache may attempt/retry to get element by key before giving up due to 'removed from cache' element state; this shouldn't normally happen more than once */
#maxCacheRemovedRetries=

# Use short max sleep so that small tests may complete faster
#/** Default: 500ms; no thread is allowed to sleep/wait for blocking operation longer than this time at a time; this helps with e.g. handling shutdown and/or changing time factor and possibly other issues; you might want to increase this if your read/write methods routinely wait for longer */
maxSleepTime=25ms

#/** Default: false; whether cache may accept out-of-order (unexpected) reads -- useful for implementations that may perform additional reads at the times not expected by the default cache implementation; see also {@link WriteBehindResyncInBackgroundCache#spiWriteLockIsAcceptOutOfOrderRead(Object, Object, WBRBCacheEntry, site.sonata.extra2.cache.wbrb.WriteBehindResyncInBackgroundCache.WBRBCachePayload)} */ 
#acceptOutOfOrderReads=
	
#/** Default: 10s; 'time window' over which log throttling calculates maximum number of allowed messages (per message type) */
#logThrottleTimeInterval=

#/** Default: 10; zero value disabled throttling; how many messages of a single type can be logged per log throttling 'time window' */
#logThrottleMaxMessagesOfTypePerTimeInterval=
	
#/** Default: false (for performance); if enabled, various events will be passed to {@link WriteBehindResyncInBackgroundCache#spiUnknownLock_Event(site.sonata.extra2.cache.wbrb.WriteBehindResyncInBackgroundCache.WBRBEvent, Object, site.sonata.extra2.cache.wbrb.WriteBehindResyncInBackgroundCache.WBRBCacheEntry, site.sonata.extra2.cache.wbrb.WriteBehindResyncInBackgroundCache.WBRBCachePayload, Throwable, Object...)} */
#eventNotificationEnabled=
